// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Server {
  id         Int        @id @default(autoincrement())
  enable     Boolean    @default(true)
  auth       Auth?      @relation(fields: [authId], references: [id])
  name       String
  hostname   String
  http_port  Int
  ssl_port   Int
  use_ssl    Boolean
  ssl_config SSLConfig? @relation(fields: [sSLConfigId], references: [id])
  worker_access Boolean @default(false)

  ProxyServer ProxyServer[]
  authId      Int?
  sSLConfigId Int?

  @@unique(name: "http_endpoint", [hostname, http_port])
  @@unique(name: "ssl_endpoint", [hostname, ssl_port])
}

model ProxyServer {
  id             Int    @id @default(autoincrement())
  server         Server @relation(fields: [serverId], references: [id])
  forward_scheme Scheme @default(HTTP)
  forward_server String
  forward_port   Int

  serverId Int
}

model SSLConfig {
  id                    Int      @id @default(autoincrement())
  name                  String   @default("Default")
  cert_location         String   @default("/ssl/default/fullkey.pem")
  cert_key_location     String   @default("/ssl/default/privkey.pem")
  session_timeout       String   @default("1d")
  session_cache         String   @default("shared:MozSSL:10m")
  session_tickets       Boolean  @default(false)
  protocols             String[] @default(["TLSv1.3"])
  prefer_server_ciphers Boolean  @default(false)
  stapling              Boolean  @default(false)
  stapling_verify       Boolean  @default(false)
  Server                Server[]
}

model Auth {
  id                   Int      @id @default(autoincrement())
  name                 String   @default("")
  auth_request         String   @default("")
  auth_request_headers String[] @default([])
  proxy_headers        String[] @default([])
  directives           String[] @default([])

  locations Location[]

  Server Server[]
}

// A lazy implementation of locations for now
model Location {
  id         Int      @id @default(autoincrement())
  prefix     String
  location   String
  directives String[]

  Auth Auth[]
}

model Stream {
  id             Int    @id @default(autoincrement())
  name           String @default("")
  incomming_port Int    @default(0)
  upstream_host  String @default("")
  upstream_port  Int    @default(0)
}

enum Scheme {
  HTTP
  HTTPS
}
